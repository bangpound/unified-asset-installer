<?php

namespace PatternLab\Composer;

use Composer\Installer\InstallationManager;
use Composer\Package\PackageInterface;
use Composer\Script\Event;
use Composer\Util\Filesystem;

class DefaultConfigListener extends AbstractListener
{
    public function postAutoloadDump(Event $event)
    {
        // This method is called twice. Run it only once.
        if (!$this->runPostAutoloadDump) {
            return;
        }

        $this->runPostAutoloadDump = false;

        $event->getIO()->write('<info>Generating default configuration</info>');
        $packages = array_filter($event->getComposer()->getRepositoryManager()
          ->getLocalRepository()->getCanonicalPackages(), function (PackageInterface $package) {
            return strpos($package->getType(), 'patternlab-') === 0;
        });

        $configs = $this->getConfigs($packages);
        $configs = array_map(function ($config) {
            return var_export($config, true);
        }, $configs);
        $file = $this->packageDir.'/config.php';
        $configFile = <<<EOF
<?php

// config.php @generated by Pattern Lab

return array(

EOF;
        $configFile .= self::exportArray($configs);
        $configFile .= ");\n";
        file_put_contents($file, $configFile);

        $filesystem = new Filesystem();
        $paths = $this->getPaths($packages, $event->getComposer()->getInstallationManager());
        $paths = array_map(function ($path) use ($filesystem) {
            return $filesystem->findShortestPathCode(realpath($this->packageDir), $path, true);
        }, $paths);
        $file = $this->packageDir.'/paths.php';

        $pathsFile = <<<EOF
<?php

// paths.php @generated by Pattern Lab

return array(

EOF;

        $pathsFile .= self::exportArray($paths);
        $pathsFile .= ");\n";
        file_put_contents($file, $pathsFile);
    }

    protected function getConfigs($packages)
    {
        $configs = [];

        /** @var PackageInterface $package */
        foreach ($packages as $package) {
            $config = [];
            /* @var PackageInterface $package */
            $extra = $package->getExtra();

            // make sure that it has the name-spaced section of data to be parsed. if it exists parse it
            if (isset($extra['patternlab'])) {
                // see if we need to modify the config
                $config = $extra['patternlab'];
            }

            switch ($package->getType()) {
                case 'patternlab-starterkit':
                    $config['config']['starterKit'] = $package->getName();
                    break;

                case 'patternlab-styleguidekit':
                    if (strpos($package->getName(), '-assets-') === false) {
                        $config['config']['styleguideKit'] = $package->getName();
                    }
                    break;
            }

            $configs[$package->getName()] = $config;
        }

        return $configs;
    }

    protected function getPaths($packages, InstallationManager $install)
    {
        $paths = [];
        /** @var PackageInterface $package */
        foreach ($packages as $package) {
            $paths[$package->getName()] = realpath($install->getInstallPath($package));
        }

        return $paths;
    }
}
